# https://stepik.org/lesson/24463/step/7?unit=6771

n = int(input())  # число классов исключений
dic_classes = {}  # словарь с классами в виде {предок: дети}
for i in range(n):
    elements = input().strip().split(' ')
    child = elements[0]
    if dic_classes.get(child) is None:
        dic_classes[child] = set()
        dic_classes[child].add(child)
    if len(elements) != 1:
        parents = elements[2:]
        for parent in parents:
            if dic_classes.get(parent) is None:
                dic_classes[parent] = set()
                dic_classes[parent].add(parent)
            dic_classes[parent].add(child)

"""функция возвращает всех детеq указанного класса, взято из статьи 
https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/ """

def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited


m = int(input())  # число обрабатываемых исключений
used_exception = set()  # множество уже обработанных исключений

for k in range(m):
    exception = input().strip()
    if exception in used_exception:
        print(exception)
    else:
        used_exception.update(dfs(dic_classes, exception))
